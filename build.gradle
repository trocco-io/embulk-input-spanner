plugins {
    id "java"
    id "maven-publish"
    id "org.embulk.embulk-plugins" version "0.4.2"
    id "com.diffplug.spotless" version "5.15.0"
    id "com.palantir.git-version" version "0.12.3"
}
repositories {
    mavenCentral()
}

group = "io.trocco"
description = "An embulk plugin to load data from Cloud Spanner."
version = {
    def vd = versionDetails()
    if (vd.commitDistance == 0 && vd.lastTag ==~ /^[0-9]+\.[0-9]+\.[0-9]+(\.[a-zA-Z0-9]+)?/) {
        vd.lastTag
    } else {
        "0.0.0.${vd.gitHash}"
    }
}()

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    def embulkVersion = "0.10.33"
    compileOnly "org.embulk:embulk-api:${embulkVersion}"
    compileOnly "org.embulk:embulk-spi:${embulkVersion}"

    compile "org.embulk:embulk-util-config:0.3.0"
    compile "org.embulk:embulk-util-json:0.1.1"

    compile "org.embulk:embulk-input-jdbc:0.12.3"
    compile project(path: ":google-cloud-spanner-jdbc-shadow", configuration: 'shadow')

    testImplementation platform('org.junit:junit-bom:5.8.1')
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.embulk:embulk-core:${embulkVersion}"
    testImplementation "org.embulk:embulk-deps:${embulkVersion}"
}
embulkPlugin {
    mainClass = "org.embulk.input.spanner.SpannerInputPlugin"
    category = "input"
    type = "spanner"
}
publishing {
    publications {
        embulkPluginMaven(MavenPublication) {  // Publish it with "publishEmbulkPluginMavenPublicationToMavenRepository".
            from components.java  // Must be "components.java". The dependency modification works only for it.
        }
    }
    repositories {
        maven {
            url = "${project.buildDir}/mavenPublishLocal"
        }
    }
}
gem {
    from("LICENSE.txt")
    authors = [ "Civitaspo" ]
    email = [ "civitaspo@gmail.com" ]
    summary = "An embulk plugin to load data from Cloud Spanner."
    homepage = "https://github.com/trocco-io/embulk-input-spanner"
    licenses = [ "MIT" ]
}
spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
    }
}
test {
	useJUnitPlatform()
    testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
        showStandardStreams true
	}
}
